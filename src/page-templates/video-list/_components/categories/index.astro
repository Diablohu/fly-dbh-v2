---
import { actions } from "astro:actions";
import { type VideoListPageTypesType } from "@/types";
import getVideoListPageLink from "@/utils/get-video-list-page-link";
import { specialTagsTutorial } from "@/global";
import { VIDEO_LIST_PAGE_CATEGORY_SWITCH_SMALL_SCREEN } from "@/constants/element-ids";

import VideosHollow from "@/assets/svg-symbols/videos-hollow.svg?raw";
import VideosFill from "@/assets/svg-symbols/videos-fill.svg?raw";
import ArrowSvg from "@/assets/arrow/left3.svg";

type Props = {
    type?: VideoListPageTypesType;
    slug?: string;
    isIndex: boolean;
};

const { data, error: error } = await Astro.callAction(
    actions.videoListPageFetchTags,
    {}
    //   Astro.props.type as Required<Props>["type"]
);
if (error) {
    console.trace(error);
    Astro.response.status = 500;
    // Astro.response.statusText = (error.cause || error.message || "") as string;
    return Astro.rewrite("/500");
}

const mainTags: typeof list = [];
const subTags: typeof list = [];
data?.forEach((tag) => {
    if (!tag.title) return;
    if (!tag.slug) return;
    if (specialTagsTutorial.includes(tag.slug)) return;
    const item: (typeof list)[0] = {
        type: "link",
        text: tag.title,
        linkType: "tag",
        linkSlug: tag.slug,
        isActive: Astro.props.slug === tag.slug,
    };
    if (tag.tag_type === "category") mainTags.push(item);
    subTags.push(item);

    if (tag.slug === "tutorial") {
        specialTagsTutorial.forEach((slug) => {
            const thisData = data.find((d) => d.slug === slug);
            if (!thisData) return;
            if (!thisData.title) return;
            mainTags.push({
                type: "link",
                text: thisData.title,
                linkType: "tag",
                linkSlug: slug,
                level: 2,
                isActive: Astro.props.slug === slug,
            });
        });
    }
});

const list: Array<
    | {
          type: "subtitle";
          text: string;
      }
    | {
          type: "link";
          text: string;
          linkType?: VideoListPageTypesType;
          linkSlug?: string;
          route?: string;
          level?: number;
          isActive?: boolean;
          iconHtml?: string;
          iconHtmlActive?: string;
      }
    | {
          type: "explore";
          text: string;
          explore: VideoListPageTypesType;
      }
    | "divider"
> = [
    {
        type: "link",
        text: "最新视频",
        route: getVideoListPageLink(),
        isActive: Astro.props.isIndex,
        iconHtml: VideosHollow,
        iconHtmlActive: VideosFill,
    },
    "divider",
    {
        type: "subtitle",
        text: "视频分类",
    },
    ...mainTags,
    "divider",
    {
        type: "subtitle",
        text: "更多内容",
    },
];
// console.log(data, list);

/*

Index

---

Main Categories
- news
- tutorial
    - aircraft
    - tips
    - aviation
- review
- chat
- world
- short

---

Explore More
- Tags
- Aircraft Families
- Aircraft Onboard Devices
- Aerodromes
- Games / Platforms
- Game Updates
- Related Developers

*/
---

<aside class="categories">
    <section class="wrapper">
        <label for={VIDEO_LIST_PAGE_CATEGORY_SWITCH_SMALL_SCREEN}
            ><ArrowSvg />收起分类</label
        >
        {
            list.map((item) => {
                if (item === "divider") {
                    return <hr />;
                }
                switch (item.type) {
                    case "link": {
                        return (
                            <a
                                href={
                                    item.route ||
                                    getVideoListPageLink(
                                        item.linkType,
                                        item.linkSlug
                                    )
                                }
                                class:list={[
                                    "item",
                                    "link",
                                    `is-level-${item.level || 1}`,
                                    ,
                                    {
                                        "is-active": item.isActive,
                                    },
                                ]}
                                set:html={`
                                    ${item.isActive ? item.iconHtmlActive || "" : item.iconHtml || ""}
                                    ${item.text}`}
                            />
                        );
                    }
                    case "subtitle": {
                        return <strong class="item title">{item.text}</strong>;
                    }
                    case "explore": {
                        return null;
                    }
                    default:
                        return null;
                }
            })
        }
        <span>TODO: MORE CATEGORIES</span>
    </section>
    <label for={VIDEO_LIST_PAGE_CATEGORY_SWITCH_SMALL_SCREEN}></label>
</aside>

<style lang="less">
    @import "@/utils/mixins.less";

    .categories {
        --item-min-height: 2.5em;
        --item-line-height: 1.1em;

        position: sticky;
        top: calc(var(--global-sticky-top) + 1em);
        flex: 0 0 175px;
        margin: 1em 0 4em 0;
        border-radius: 10px;
        overflow: hidden;
        z-index: 10;
        overscroll-behavior: contain;

        & > .wrapper {
            position: relative;
            z-index: 5;
            height: 100%;
            overflow: auto;
            scrollbar-width: thin;
            max-height: calc(100dvh - var(--global-sticky-top) - 3em);
            padding: 0 0;
            overscroll-behavior: contain;

            & > .item,
            & > label[for],
            & > hr {
                display: block;
            }
            & > .item,
            & > label[for] {
                --extra-padding-left: 0px;
                --icon-size: 1.25em;
                --icon-margin: 0.6667em;
                position: relative;
                color: inherit;
                min-height: var(--item-min-height);
                line-height: var(--item-line-height);
                padding: calc(
                        (var(--item-min-height) - var(--item-line-height)) / 2
                    )
                    (@global-edge-safe-distance-sm * 2/3);
                border-radius: 8px;
                &.title {
                    font-weight: normal;
                }
                &.link {
                    color: var(--text-color-primary);
                    text-decoration: none;
                    transition-property: transform, background-color;
                    padding-left: calc(
                        (@global-edge-safe-distance-sm * 2 / 3) +
                            var(--extra-padding-left) + var(--icon-size) +
                            var(--icon-margin)
                    );
                    &:not(:has(svg))::before {
                        --dot-size: 0.75em;
                        content: "";
                        position: absolute;
                        top: 50%;
                        left: calc(
                            var(--icon-size) * 3 / 4 +
                                var(--extra-padding-left) + 1em -
                                var(--dot-size)
                        );
                        margin-top: calc(var(--dot-size) / -2);
                        width: var(--dot-size);
                        height: var(--dot-size);
                        background: transparent;
                        border: 2px solid var(--border-color);
                        border-radius: 100%;
                    }
                    & > :global(svg) {
                        position: relative;
                        display: inline-block;
                        vertical-align: top;
                        width: var(--icon-size);
                        height: var(--icon-size);
                        margin-left: calc(
                            var(--icon-size) * -1 - var(--icon-margin)
                        );
                        margin-right: calc(var(--icon-margin) / 2);
                    }
                    &:hover,
                    &.is-active {
                        background: var(--tag-background-color);
                    }
                    &.is-active {
                        &::before {
                            background-color: var(--accent-color-purple);
                        }
                    }
                    &.is-level-2 {
                        --extra-padding-left: 1em;
                    }
                }
                & + .item {
                    margin-top: 0.25em;
                }
            }
            & > label[for] {
                --size: 1.2em;
                cursor: pointer;
                transition: color var(--base-transition-duration);
                display: none;
                svg {
                    display: inline-block;
                    vertical-align: top;
                    position: relative;
                    width: var(--size);
                    height: var(--size);
                    // top: 0.2em;
                    margin-right: 0.6667em;
                }
                &:hover {
                    color: var(--text-color-primary);
                }
            }
        }
        & > label[for] {
            display: none;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            overscroll-behavior: contain;
            scrollbar-width: none;
            &::before {
                content: "";
                position: relative;
                display: block;
                top: 0;
                height: 200vh;
            }
        }

        .screen-sm({
            pointer-events: none;
            position: fixed;
            top: var(--global-sticky-top);
            left: 0;
            height: calc(100% - var(--global-sticky-top));
            height: calc(100vh - var(--global-sticky-top));
            height: calc(100dvh - var(--global-sticky-top));
            width: 100%;
            margin: 0;
            background-color: var(--global-header-background-color);
            backdrop-filter: var(--global-header-backdrop-filter);
            overflow: hidden;
            opacity: 0;
            transition: opacity var(--base-transition-duration) allow-discrete;
            & > .wrapper{
                width: calc(66.6667dvw);
                padding-top: var(--global-edge-safe-distance);
                padding-left: var(--global-edge-safe-distance);
                padding-right: var(--global-edge-safe-distance);
                padding-bottom: calc(
                    var(--global-navbar-height) +
                    var(--global-navbar-bottom-edge) * 2 + 
                    var(--global-bottom-safe-distance)
                );
                max-height: none;
                overflow: auto;
                transform: translateX(-100%);
                transition: transform var(--base-transition-duration) allow-discrete;
                background: var(--theme-color);
                & > label[for] {
                    display: block;
                }
            }
            & > label[for] {
                display: block;
            }
        });
    }

    :global(input[type="checkbox"]:checked) ~ .categories {
        opacity: 1;
        pointer-events: all;
        & > .wrapper {
            transform: none;
        }
    }
</style>

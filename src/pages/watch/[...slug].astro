---
import { actions, ActionError } from "astro:actions";
import { VIDEO_SOURCE } from "@/constants/cookies";
import { type ValidVideoSourceType } from "@/types";
import dayjs from "dayjs";

import videoPlatforms from "@/constants/video-platforms";
// import log from "@/page-templates/index/_log.ts";
import iconKook from "@/assets/icon-kook.svg?raw";

import Layout from "@/layouts/layout.astro";
import Block from "@/components/block.astro";
import TagButton from "@/components/tag-button.astro";
import Player from "./_components/player";
import SelectPlatform from "./_components/select-platform";

import prettifyTitle from "@/utils/prettify-title";
import getVideoListPageLink from "@/utils/get-video-list-page-link";
import getVideoListPageTypeInfo from "@/utils/get-video-list-page-type-info";
import getVideoCategoryInfoFromRawTypeData, {
    type CategoryInfoType,
} from "@/utils/get-video-category-info-from-raw-type-data";
import { errorLog } from "@/utils/log";

// ============================================================================

if (!Astro.params.slug) return Astro.redirect(getVideoListPageLink());

const { data: video, error } = await Astro.callAction(
    actions.watchPageFetch,
    Astro.params.slug
);
if ((error && error.code === "NOT_FOUND") || !video) {
    if (error)
        errorLog(
            [
                `${Astro.originPathname} -> 404`,
                error.code,
                error.message,
                (error.cause as any)?.GROQ
                    ? `GROQ: "${(error.cause as any)?.GROQ.replace(/\n\s+/gm, " ")}"`
                    : "",
            ]
                .filter(Boolean)
                .join(" | ")
        );
    else
        errorLog(
            [`${Astro.originPathname} -> 404`, "No video info"]
                .filter(Boolean)
                .join(" | ")
        );
    return Astro.rewrite("/404");
}
if (error) {
    const err = error as unknown as ActionError;
    errorLog(
        [
            `${Astro.originPathname} -> 500`,
            err.code,
            err.message,
            (err.cause as any)?.GROQ
                ? `GROQ: "${(err.cause as any)?.GROQ.replace(/\n\s+/gm, " ")}"`
                : "",
        ]
            .filter(Boolean)
            .join(" | ")
    );
    Astro.response.status = 500;
    Astro.props.error = error;
    return Astro.rewrite("/500");
}

// console.log(video);
---

<Layout
    title={prettifyTitle(video.title)}
    contentType="video-player"
    showHeader
    showFooter
>
    <section class="player-container">
        <Player
            links={video.links}
            title={video.title}
            cover={video.cover}
            defaultVideoSource={Astro.cookies.get(VIDEO_SOURCE)
                ?.value as ValidVideoSourceType}
            client:load
        />
    </section>
    <Block class="video-infos">
        <section class="infos-container">
            <section class="title">
                <section class="tags">
                    {
                        video.tags?.map(({ _id, slug, name }) => (
                            <TagButton
                                href={getVideoListPageLink("tag", slug || _id)}
                            >
                                {name}
                            </TagButton>
                        ))
                    }
                </section>
                <h1>{prettifyTitle(video.title)}</h1>
                <section class="release">
                    {
                        dayjs(new Date(video.release)).format(
                            `YYYY年M月D日 HH:mm`
                        )
                    }
                </section>
                <SelectPlatform
                    client:idle
                    defaultVideoSource={Astro.cookies.get(VIDEO_SOURCE)
                        ?.value as ValidVideoSourceType}
                    links={video.links}
                />
            </section>

            <section class="description">{video.description}</section>

            <section class="relations">
                {
                    (
                        [
                            // [
                            //     "",
                            //     video.tags?.map(({ _id, slug, name }) => ({
                            //         name,
                            //         route: getVideoListPageLink(
                            //             "tag",
                            //             slug || _id
                            //         ),
                            //     })),
                            // ],
                            [
                                getVideoListPageTypeInfo("aircraftFamily").name,
                                video.aircraft_families?.map((item) =>
                                    getVideoCategoryInfoFromRawTypeData(
                                        "aircraftFamily",
                                        item
                                    )
                                ),
                            ],
                            [
                                getVideoListPageTypeInfo(
                                    "aircraftOnboardDevice"
                                ).name,
                                video.aircraft_onboard_devices?.map((item) =>
                                    getVideoCategoryInfoFromRawTypeData(
                                        "aircraftOnboardDevice",
                                        item
                                    )
                                ),
                            ],
                            [
                                getVideoListPageTypeInfo("aerodrome").name,
                                video.aerodromes?.map((item) =>
                                    getVideoCategoryInfoFromRawTypeData(
                                        "aerodrome",
                                        item
                                    )
                                ),
                            ],
                            [
                                getVideoListPageTypeInfo("developer").name,
                                video.developers?.map((item) =>
                                    getVideoCategoryInfoFromRawTypeData(
                                        "developer",
                                        item
                                    )
                                ),
                            ],
                            [
                                getVideoListPageTypeInfo("platform").name,
                                video.games?.map((item) =>
                                    getVideoCategoryInfoFromRawTypeData(
                                        "platform",
                                        item
                                    )
                                ),
                            ],
                            [
                                getVideoListPageTypeInfo("platformUpdate").name,
                                video.game_updates?.map((item) =>
                                    getVideoCategoryInfoFromRawTypeData(
                                        "platformUpdate",
                                        item
                                    )
                                ),
                            ],
                            [
                                getVideoListPageTypeInfo("event").name,
                                video.events?.map((item) =>
                                    getVideoCategoryInfoFromRawTypeData(
                                        "event",
                                        item
                                    )
                                ),
                            ],
                        ] as [string, CategoryInfoType[]][]
                    ).map(
                        ([relationName, tags]) =>
                            Array.isArray(tags) &&
                            tags.length > 0 && (
                                <dl class="relation">
                                    {relationName && (
                                        <dt>相关{relationName}</dt>
                                    )}
                                    <dd class="tags">
                                        {tags?.map(
                                            ({
                                                prefix,
                                                name,
                                                suffix,
                                                route,
                                            }) => (
                                                <TagButton
                                                    href={route}
                                                    prefix={prefix}
                                                >
                                                    {name}
                                                    {suffix
                                                        ? ` (${suffix})`
                                                        : ""}
                                                </TagButton>
                                            )
                                        )}
                                    </dd>
                                </dl>
                            )
                    )
                }
            </section>

            <section class="links">
                <dl>
                    <dt>参与讨论</dt>
                    {
                        (
                            Object.entries(video.links) as [
                                ValidVideoSourceType,
                                string,
                            ][]
                        ).map(([platform, url]) => {
                            if (!url) return null;
                            const thisPlatform = videoPlatforms.find(
                                ({ name }) => name === platform
                            );
                            if (!thisPlatform) return null;
                            return (
                                <dd>
                                    <a
                                        href={url}
                                        data-platform={thisPlatform.name}
                                        set:html={`${thisPlatform.iconHtml}${thisPlatform.title}评论区`}
                                    />
                                </dd>
                            );
                        })
                    }
                    <a
                        href="https://qun.fly-dbh.com"
                        data-platform="kook"
                        set:html={`${iconKook}粉丝群`}
                    />
                </dl>
            </section>
        </section>
    </Block>
</Layout>

<style lang="less">
    @import "@/utils/mixins.less";

    .player-container {
        --player-height-shrink: 0px;
        --player-aspect-ratio: 16/9;
        --player-min-height: 300px;
        --player-max-height: calc(100dvh - var(--global-header-height) * 4);
        --player-background: #000;

        position: relative;
        z-index: 5;
        background: var(--player-background);
        width: 100%;
        user-select: none;

        @media (aspect-ratio <= @video-player-sticky-screen-aspect-ratio) {
            --player-min-height: 0;
            position: sticky;
            top: var(--global-sticky-top);
        }

        // &::after {
        //     content: "";
        //     position: absolute;
        //     bottom: -1px;
        //     height: 1px;
        //     left: 0;
        //     right: 0;
        //     background: var(--border-color);
        // }
    }

    .video-infos {
        position: relative;
        z-index: 1;
        user-select: all;
    }

    .infos-container {
        user-select: auto;
        padding: 1em 0 4em 0;
        gap: 2em;
        display: grid;
        grid-template-columns: 7fr 3fr;
        grid-template-rows: auto auto 1fr;
        grid-template-areas:
            "title title"
            "description relations"
            "links relations";

        .tags {
            font-weight: normal;
            display: flex;
            flex-flow: row wrap;
            gap: 0.5em 0.5em;
            &:empty {
                display: none;
            }
            a {
                font-size: unit((13px / @base-font-size-number), em);
            }
        }

        dl {
            margin: 0;
            padding: 0;
            & > dt {
                // color: var(--text-color-primary);
                color: var(--text-color-secondary);
                margin: 0 0 0.3333em 0;
                // font-weight: bolder;
            }
            & > dd {
                margin: 0;
                padding: 0;
            }
        }

        & > .title {
            grid-area: title;
            padding: 0 0 0.75em 0;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            flex-flow: column nowrap;
            gap: 0.5em;
            position: relative;
            margin-bottom: -1em;
            & > .tags {
                margin-bottom: 0.25em;
            }
            & > h1 {
                margin: 0;
            }
        }
        & > .description {
            grid-area: description;
        }
        & > .relations,
        & > .links {
            display: flex;
            flex-flow: row wrap;
            gap: 1em 1em;
            & > dl {
                flex: 1 1 600px;
            }
            &::after {
                content: "";
                height: 100%;
            }
        }
        & > .relations {
            grid-area: relations;
        }
        & > .links {
            grid-area: links;
            dd {
                margin-bottom: 0.13333em;
            }
            a {
                display: inline-block;
                color: var(--text-color-primary);
                text-decoration: none;
                :global(svg) {
                    display: inline-block;
                    vertical-align: top;
                    width: 1.25em;
                    height: 1.25em;
                    margin-top: 0.05em;
                    margin-right: 0.3333em;
                    color: var(--accent-color);
                }
                &[data-platform="bilibili"] {
                    --accent-color: var(--theme-color-bilibili);
                }
                &[data-platform="youtube"] {
                    --accent-color: var(--theme-color-youtube);
                }
                &[data-platform="douyin"] {
                    --accent-color: var(--theme-color-tiktok);
                }
                &[data-platform="kook"] {
                    --accent-color: var(--theme-color-kook);
                }
                &:hover {
                    color: var(--accent-color);
                }
            }
        }

        .screen-md({
            grid-template-columns: 5fr 3fr;
        });
        .screen-sm({
            grid-template-columns: 1fr;
            grid-template-rows: auto;
            grid-template-areas:
                "title"
                "description"
                "links"
                "relations";
        });
    }
</style>
